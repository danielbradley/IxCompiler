.. Queue

~!include/ix/Queue.h~
#ifndef IX_QUEUE_H
#define IX_QUEUE_H

Queue*      Queue_new       ( Destructor destroy );
Queue*      Queue_free      ( Queue** self );
Queue*      Queue_addHead   ( Queue* self, void** object );
Queue*      Queue_addTail   ( Queue* self, void** object );
void*       Queue_removeHead( Queue* self );
const void* Queue_getHead   ( Queue* self );
const void* Queue_getTail   ( Queue* self );
int         Queue_getLength ( Queue* self );

#endif
~

~!c/ix/Queue.c~
#include "ix.h"

struct _Queue
{
    Array* inner;

};
~

~c/ix/Queue.c~
Queue* Queue_new( Destructor destroy )
{
    Queue* self = Platform_Alloc( sizeof( Queue ) );

    if ( self )
    {
        self->inner = Array_new( destroy );
    }
    return self;
}
~

~c/ix/Queue.c~
Queue* Queue_free( Queue** self )
{
    Array_free( &(*self)->inner );
    Platform_Free( self );

    return *self;
}
~

~c/ix/Queue.c~
Queue* Queue_addHead( Queue* self, void** object )
{
    Array_unshift( self->inner, object );

    return self;
}
~

~c/ix/Queue.c~
Queue* Queue_addTail( Queue* self, void** object )
{
    Array_push( self->inner, object );

    return self;
}
~

~c/ix/Queue.c~
void* Queue_removeHead( Queue* self )
{
    return Array_shift( self->inner );
}
~

~c/ix/Queue.c~
const void* Queue_getHead( Queue* self )
{
    return Array_getObject( self->inner, 0 );
}
~

~c/ix/Queue.c~
const void* Queue_getTail( Queue* self )
{
    int last = Array_getLength( self->inner );
    if ( last > 0 )
    {
        return Array_getObject( self->inner, --last );
    }
    else
    {
        return null;
    }
}
~

~c/ix/Queue.c~
int Queue_getLength( Queue* self )
{
    return Array_getLength( self->inner );
}
~
