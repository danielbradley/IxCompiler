
.. ArrayOfString

~!include/ix/ArrayOfString.h~
#ifndef IX_ARRAYOFSTRING_H
#define IX_ARRAYOFSTRING_H

ArrayOfString* ArrayOfString_new();

ArrayOfString* ArrayOfString_free      (       ArrayOfString** self );
void           ArrayOfString_push      (       ArrayOfString*  self, ANY_STRING object );
String*        ArrayOfString_pop       (       ArrayOfString*  self );
String*        ArrayOfString_shift     (       ArrayOfString*  self );
void           ArrayOfString_unshift   (       ArrayOfString*  self, String** object );
void           ArrayOfString_append    (       ArrayOfString*  self, const ArrayOfString* other );
void           ArrayOfString_union     (       ArrayOfString*  self, const ArrayOfString* other );

bool           ArrayOfString_contains  ( const ArrayOfString*  self, const String* str );
int            ArrayOfString_getLength ( const ArrayOfString*  self            );
int            ArrayOfString_getLongest( const ArrayOfString*  self            );
const String*  ArrayOfString_getObject ( const ArrayOfString*  self, int index );

#endif
~

~!c/ix/ArrayOfString.c~
#include "ix.h"

struct _ArrayOfString
{
    Array* array;
    int    longest;
};
~

~c/ix/ArrayOfString.c~
ArrayOfString* ArrayOfString_new()
{
    ArrayOfString* self = Platform_Alloc( sizeof( ArrayOfString ) );
    if ( self )
    {
        self->array   = Array_new( (Destructor) String_free );
        self->longest = 0;
    }

    return self;
}
~

~c/ix/ArrayOfString.c~
ArrayOfString* ArrayOfString_free( ArrayOfString** self )
{
    if ( *self )
    {
        Array_free   ( &(*self)->array );
        Platform_Free(    self         );
    }

    return *self;
}
~

~c/ix/ArrayOfString.c~
void ArrayOfString_push( ArrayOfString* self, ANY_STRING _object )
{
    String** object = (String**) _object;

    int len = String_getLength( *object );
    if ( len > self->longest )
    {
        self->longest = len;
    }

    Array_push( self->array, (void**) object );
}
~

~c/ix/ArrayOfString.c~
String* ArrayOfString_pop( ArrayOfString* self )
{
    return (String*) Array_pop( self->array );
}
~

~c/ix/ArrayOfString.c~
String* ArrayOfString_shift( ArrayOfString* self )
{
    return (String*) Array_shift( self->array );
}
~

~c/ix/ArrayOfString.c~
void ArrayOfString_unshift( ArrayOfString* self, String** object )
{
    Array_unshift( self->array, (void**) object );
}
~

~c/ix/ArrayOfString.c~
bool ArrayOfString_contains( const ArrayOfString* self, const String* str )
{
    int n = Array_getLength( self->array );

    for ( int i=0; i < n; i++ )
    {
        const String* tmp = ArrayOfString_getObject( self, i );

        if ( String_equals( tmp, str ) ) return TRUE;
    }
    return FALSE;
}
~

~c/ix/ArrayOfString.c~
int ArrayOfString_getLength( const ArrayOfString* self )
{
    return Array_getLength( self->array );
}
~

~c/ix/ArrayOfString.c~
int ArrayOfString_getLongest( const ArrayOfString* self )
{
    return self->longest;
}
~

~c/ix/ArrayOfString.c~
const String* ArrayOfString_getObject( const ArrayOfString* self, int index )
{
    return (const String*) Array_getObject( self->array, index );
}
~

~c/ix/ArrayOfString.c~
void ArrayOfString_append( ArrayOfString* self, const ArrayOfString* other )
{
    int n = ArrayOfString_getLength( other );

    for ( int i=0; i < n; i++ )
    {
        String* tmp = String_copy( ArrayOfString_getObject( other, i ) );

        ArrayOfString_push( self, &tmp );
    }
}
~

~c/ix/ArrayOfString.c~
void ArrayOfString_union( ArrayOfString* self, const ArrayOfString* other )
{
    int n = ArrayOfString_getLength( other );

    for ( int i=0; i < n; i++ )
    {
        const String* provisional = ArrayOfString_getObject( other, i );

        if ( !ArrayOfString_contains( self, provisional ) )
        {
            String* tmp = String_copy( provisional );
            ArrayOfString_push( self, &tmp );
        }
    }
}
~
