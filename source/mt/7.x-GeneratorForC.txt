
.. Generator for C

~!include/ixcompiler.GeneratorForC.h~
#ifndef IXCOMPILER_GENERATORFORC_H
#define IXCOMPILER_GENERATORFORC_H

#include "ix.h"
#include "ixcompiler.h"

int Generator_FunctionForC( const IxSourceUnitCollection* source_units, const Path* output_path );

#endif
~

~!c/ixcompiler.GeneratorForC.c~
#include <stdio.h>
#include "ix.h"
#include "ixcompiler.CSignature.h"
#include "ixcompiler.CStatement.h"
#include "ixcompiler.GeneratorForC.h"
#include "ixcompiler.IxSourceClass.h"
#include "ixcompiler.IxSourceMember.h"
#include "ixcompiler.IxSourceMethod.h"
#include "ixcompiler.IxSourceParameter.h"
#include "ixcompiler.IxSourceSignature.h"
#include "ixcompiler.IxSourceStatement.h"
#include "ixcompiler.IxSourceType.h"
#include "ixcompiler.IxSourceUnit.h"
#include "ixcompiler.IxSourceUnitCollection.h"

#define TARGET_HEADER_NAME "/include/"
#define TARGET_SOURCE_NAME "/c/"

static void    GenerateHeaderFileThenWrite ( const IxSourceUnitCollection* sourceUnits, const String* outputDir );
static String* GenerateHeaderFile          ( const IxSourceUnitCollection* sourceUnits );
static String* GenerateHeaderFileIfDef     ( const IxSourceUnit*           sourceUnit  );
static String* GenerateHeaderFileTypeDef   ( const String*                 type,        int           longest  );
static String* GenerateHeaderFileSignatures( const IxSourceUnitCollection* sourceUnits );


static void    GenerateSourceFileThenWrite                       ( const IxSourceUnitCollection* sourceUnits, const String* outputDir );
static String* GenerateSourceFile                                ( const IxSourceUnitCollection* sourceUnits );
static String* GenerateSourceFileIncludes                        ( const IxSourceUnitCollection* sourceUnits );
static String* GenerateSourceFileStructs                         ( const IxSourceUnitCollection* sourceUnits );
static String* GenerateSourceFileStructsForSourceUnit            ( const IxSourceUnit*           sourceUnit, const Dictionary* resolvedTypes );
static String* GenerateSourceFileStructsForSourceUnitMembers     ( const IxSourceUnit*           sourceUnit, const Dictionary* resolvedTypes );
static String* GenerateSourceFileStructsForSourceUnitClassMembers( const IxSourceUnit*           sourceUnit, const Dictionary* resolvedTypes );

static String* GenerateSourceFileMethods                               ( const IxSourceUnitCollection* sourceUnits );
static String* GenerateSourceFileMethodsForSourceUnit                  ( const IxSourceUnit*           sourceUnit, const Dictionary* resolvedTypes );
static String* GenerateSourceFileMethodsForSourceUnitFunction          ( const IxSourceMethod*         method,     const Dictionary* resolvedTypes, const char* classPrefix );
static String* GenerateSourceFileMethodsForSourceUnitFunctionStatements( const IxSourceMethod*         method,     const Dictionary* resolvedTypes );

~

~c/ixcompiler.GeneratorForC.c~
int Generator_FunctionForC( const IxSourceUnitCollection* sourceUnits, const Path* outputPath )
{
    int         n                 = IxSourceUnitCollection_getLength( sourceUnits );
    String*     output_dir        = String_new( Path_getFullPath( outputPath ) );
    String*     target_header     = String_new( TARGET_HEADER_NAME );
    String*     target_source     = String_new( TARGET_SOURCE_NAME );
    String*     target_header_dir = String_cat( output_dir, target_header );
    String*     target_source_dir = String_cat( output_dir, target_source );
    Path*       target_header_path = Path_new( String_content( target_header_dir ) );
    Path*       target_source_path = Path_new( String_content( target_source_dir ) );

    if ( !Platform_Path_Create( target_header_path ) )
    {
        Console_Write( "Aborting. Could not create output header dir: %s\n", String_content( target_header_dir ) );
        Platform_Exit( -1 );
    }

    if ( !Platform_Path_Create( target_source_path ) )
    {
        Console_Write( "Aborting. Could not create output source dir: %s\n", String_content( target_source_dir ) );
        Platform_Exit( -1 );
    }

    Console_Write( "Output header dir: %s\n", String_content( target_header_dir ) );
    Console_Write( "Output source dir: %s\n", String_content( target_source_dir ) );

    GenerateHeaderFileThenWrite( sourceUnits, target_header_dir );
    GenerateSourceFileThenWrite( sourceUnits, target_source_dir );

    String_free( &output_dir        );
    String_free( &target_header     );
    String_free( &target_source     );
    String_free( &target_header_dir );
    String_free( &target_source_dir );

    return SUCCESS;
}
~

