
.. Enum Token Type

~!include/ixcompiler.EnumTokenType.h~
#ifndef IXCOMPILER_ENUMTOKENTYPE_H
#define IXCOMPILER_ENUMTOKENTYPE_H

#include "ixcompiler.h"

enum _EnumTokenType
{
	UNKNOWN_TYPE,
    UNKNOWN_WHITESPACE,
    UNKNOWN_OPEN,
    UNKNOWN_CLOSE,

    //  Whitespace
    SPACE,
    TAB,
    NEWLINE,

    //  Open
    STARTBLOCK,
    STARTEXPRESSION,
    STARTSUBSCRIPT,
    STARTTAG,

    //  Close
    ENDBLOCK,
    ENDEXPRESSION,
    ENDSUBSCRIPT,
    ENDTAG,

    //  Symbolic
    OFTYPE,
    OPERATOR,
    ASSIGNMENTOP,
    PREFIXOP,
    INFIXOP,
	POSTFIXOP,
    PREINFIXOP,
    PREPOSTFIXOP,
    STOP,
    LINECOMMENT,
    COMMENT,

    //  Words
	COPYRIGHT,
	LICENSE,

    //  Composite
	WORD,
	FILEPATH,
	PACKAGE,
	IMPORT,
	INCLUDE,
	CLASS,
	CLASSNAME,
	INTERFACE,
	ENUM,
	ENUMNAME,
	GENERIC,
	ANNOTATION,
	IMETHOD,
	METHOD,
	BLOCK,
	MEMBER,
	MEMBERNAME,
	EXPRESSION,
	CLAUSE,
    PARAMETERS,
	PARAMETER,
	ARGUMENTS,
	ARGUMENT,
	STATEMENT,
	DECLARATION,
	JAVADOC,
	BLANKLINE,
	TOKEN,
	SYMBOL,
	KEYWORD,
	MODIFIER,
	PRIMITIVE,
	TYPE,
	METHODNAME,
	VARIABLE,
	NAME,
	METHODCALL,
	CONSTRUCTOR,
	SELECTOR,
	FLOAT,
	INTEGER,
	NUMBER,
	HEX,
	OCTAL,
	DOUBLEQUOTE,
	QUOTE,
	ESCAPED,
	OTHER
};

const char* EnumTokenType_asString( EnumTokenType type );

#endif
~

~!c/ixcompiler.EnumTokenType.c~
#include "ixcompiler.EnumTokenType.h"
~

~c/ixcompiler.EnumTokenType.c~
const char* EnumTokenType_asString( EnumTokenType type )
{
    switch ( type )
    {
	case UNKNOWN_TYPE:       return "UNKNOWN_TYPE";
    case UNKNOWN_WHITESPACE: return "UNKNOWN_WHITESPACE";
    case UNKNOWN_OPEN:       return "UNKNOWN_OPEN";
    case UNKNOWN_CLOSE:      return "UNKNOWN_CLOSE";
    case SPACE:              return "SPACE";
    case TAB:                return "TAB";
    case NEWLINE:            return "NEWLINE";
    case STARTBLOCK:         return "STARTBLOCK";
    case STARTEXPRESSION:    return "STARTEXPRESSION";
    case STARTSUBSCRIPT:     return "STARTSUBSCRIPT";
    case STARTTAG:           return "STARTTAG";
    case ENDBLOCK:           return "ENDBLOCK";
    case ENDEXPRESSION:      return "ENDEXPRESSION";
    case ENDSUBSCRIPT:       return "ENDSUBSCRIPT";
    case ENDTAG:             return "ENDTAG";
    case OFTYPE:             return "OFTYPE";
    case OPERATOR:           return "OPERATOR";
    case ASSIGNMENTOP:       return "ASSIGNMENTOP";
    case PREFIXOP:           return "PREFIXOP";
    case INFIXOP:            return "INFIXOP";
    case POSTFIXOP:          return "POSTFIXOP";
    case PREINFIXOP:         return "PREINFIXOP";
    case PREPOSTFIXOP:       return "PREPOSTFIXOP";
    case STOP:               return "STOP";
    case LINECOMMENT:        return "LINECOMMENT";
    case COMMENT:            return "COMMENT";
	case COPYRIGHT:          return "COPYRIGHT";
	case LICENSE:            return "LICENSE";
	case WORD:               return "WORD";
	case FILEPATH:           return "FILEPATH";
	case PACKAGE:            return "PACKAGE";
	case IMPORT:             return "IMPORT";
	case INCLUDE:            return "INCLUDE";
	case CLASS:              return "CLASS";
	case CLASSNAME:          return "CLASSNAME";
	case INTERFACE:          return "INTERFACE";
	case ENUM:               return "ENUM";
	case ENUMNAME:           return "ENUMNAME";
	case GENERIC:            return "GENERIC";
	case ANNOTATION:         return "ANNOTATION";
	case IMETHOD:            return "IMETHOD";
	case METHOD:             return "METHOD";
	case BLOCK:              return "BLOCK";
	case MEMBER:             return "MEMBER";
	case MEMBERNAME:         return "MEMBERNAME";
	case EXPRESSION:         return "EXPRESSION";
	case CLAUSE:             return "CLAUSE";
    case PARAMETERS:         return "PARAMETERS";
	case PARAMETER:          return "PARAMETER";
	case ARGUMENTS:          return "ARGUMENTS";
	case ARGUMENT:           return "ARGUMENT";
	case STATEMENT:          return "STATEMENT";
	case DECLARATION:        return "DECLARATION";
	case JAVADOC:            return "JAVADOC";
	case BLANKLINE:          return "BLANKLINE";
	case TOKEN:              return "TOKEN";
	case SYMBOL:             return "SYMBOL";
	case KEYWORD:            return "KEYWORD";
	case MODIFIER:           return "MODIFIER";
	case PRIMITIVE:          return "PRIMITIVE";
	case TYPE:               return "TYPE";
	case METHODNAME:         return "METHODNAME";
	case VARIABLE:           return "VARIABLE";
	case NAME:               return "NAME";
	case METHODCALL:         return "METHODCALL";
	case CONSTRUCTOR:        return "CONSTRUCTOR";
	case SELECTOR:           return "SELECTOR";
	case FLOAT:              return "FLOAT";
	case INTEGER:            return "INTEGER";
	case NUMBER:             return "NUMBER";
	case HEX:                return "HEX";
	case OCTAL:              return "OCTAL";
	case DOUBLEQUOTE:        return "DOUBLEQUOTE";
	case QUOTE:              return "QUOTE";
	case ESCAPED:            return "ESCAPED";
	case OTHER:              return "OTHER";
    default:                 return "???";
    }
}
~
