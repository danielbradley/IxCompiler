
... Generate C Header

~c/ixcompiler.GeneratorForC.c~
static void GenerateHeaderFileThenWrite( const IxSourceUnitCollection* sourceUnits, const String* outputDir )
{
    if ( 0 < IxSourceUnitCollection_getLength( sourceUnits ) )
    {
        String*             content     = GenerateHeaderFile( sourceUnits );
        const IxSourceUnit* first       = IxSourceUnitCollection_get( sourceUnits, 0 );
        const String*       package     = IxSourceUnit_getPackage( first );
        String*             header      = String_cat( outputDir, package );
        String*             extension   = String_new( ".h" );
        String*             header_full = String_cat( header, extension );

        if ( Platform_File_WriteContents( String_content( header_full ), String_content( content ), TRUE ) )
        {
            Console_Write( "Wrote Header: %s\n", String_content( header_full ) );
        }
        else
        {
            Console_Write( "Could not write header: %s\n", String_content( header_full ) );
        }

        String_free( &content     );
        String_free( &header      );
        String_free( &extension   );
        String_free( &header_full );
    }
}
~

~c/ixcompiler.GeneratorForC.c~
static String* GenerateHeaderFile( const IxSourceUnitCollection* sourceUnits )
{
    const IxSourceUnit* first   = IxSourceUnitCollection_get      ( sourceUnits, 0 );
    int                 n       = IxSourceUnitCollection_getLength( sourceUnits    );

    StringBuffer* sb      = StringBuffer_new();
    String*       content = null;
    {
        StringBuffer_appendLine_prefix_optional( sb, "#ifndef", (String**) Give( GenerateHeaderFileIfDef( first ) ) );
        StringBuffer_appendLine_prefix_optional( sb, "#define", (String**) Give( GenerateHeaderFileIfDef( first ) ) );
        StringBuffer_appendLine_prefix_optional( sb, "",        (String**) null                           );

        // Copyright lines
        {
            const ArrayOfString* lines = IxSourceUnitCollection_getCopyrightLines( sourceUnits );
            int                  num   = ArrayOfString_getLength ( lines );

            for ( int i=0; i < num; i++ )
            {
                const String* line = ArrayOfString_getObject( lines, i );
                StringBuffer_append( sb, "// Copyright" );
                StringBuffer_append( sb, String_content( line ) );
                StringBuffer_append( sb, "\n" );
            }
            StringBuffer_append( sb, "\n" );
        }

        // License lines
        {
            const ArrayOfString* lines = IxSourceUnitCollection_getLicenseLines( sourceUnits );
            int                  num   = ArrayOfString_getLength ( lines );

            for ( int i=0; i < num; i++ )
            {
                const String* line = ArrayOfString_getObject( lines, i );
                StringBuffer_append( sb, "// License" );
                StringBuffer_append( sb, String_content( line ) );
                StringBuffer_append( sb, "\n" );
            }
            StringBuffer_append( sb, "\n" );
        }

        // Defines
        {
            StringBuffer_append( sb, "#ifndef REF\n" );
            StringBuffer_append( sb, "#define REF\n" );
            StringBuffer_append( sb, "#endif\n"      );
            StringBuffer_append( sb, "\n"            );
        }

        // Types
        {
            ArrayOfString* types   = IxSourceUnitCollection_retrieveTypes( sourceUnits );
            int            num     = ArrayOfString_getLength ( types );
            int            longest = ArrayOfString_getLongest( types );

            for ( int i=0; i < num; i++ )
            {
                const String* type = ArrayOfString_getObject( types, i );
                StringBuffer_appendLine_prefix_optional( sb, "typedef struct", (String**) Give( GenerateHeaderFileTypeDef( type, longest ) ) );
            }
        }

        //  Signatures
        StringBuffer_appendLine_prefix_optional( sb, "", (String**) Give( GenerateHeaderFileSignatures( sourceUnits ) ) );

        StringBuffer_appendLine_prefix_optional( sb, "",        null );
        StringBuffer_appendLine_prefix_optional( sb, "#endif",  null );
    }
    content = String_new( StringBuffer_content( sb ) );
    StringBuffer_free( &sb );

    return content;
}
~

~c/ixcompiler.GeneratorForC.c~
static String* GenerateHeaderFileIfDef( const IxSourceUnit* sourceUnit )
{
    String* ifdef = null;
    {
        String* suffix      = String_new( ".h" );
        String* header_name = String_cat( IxSourceUnit_getPackage( sourceUnit ), suffix );
        String* uppercase   = String_toUpperCase( header_name );

        ifdef = String_replace( uppercase, '.', '_' );

        String_free( &suffix      );
        String_free( &header_name );
        String_free( &uppercase   );
    }

    return ifdef;
}
~

~
typedef struct _<name> <name>;
~

~c/ixcompiler.GeneratorForC.c~
static String* GenerateHeaderFileTypeDef( const String* type, int longest )
{
    String* ret   = null;
    {
        String* ctype = String_replace( type, '.', '_' );
        {
            const char* _ctype = String_content( ctype );

            char pattern[99];
            char output[99];

            sprintf( pattern, "_%%-%is %%-%is;", longest, longest );
            sprintf( output, pattern, _ctype, _ctype );

            ret = String_new( output );
        }
        String_free( &ctype );
    }
    return ret;
}
~

~c/ixcompiler.GeneratorForC.c~
static String* GenerateHeaderFileSignatures( const IxSourceUnitCollection* sourceUnits )
{
    String* st_signatures = null;
    {
        StringBuffer* sb = StringBuffer_new();
        {
            const Dictionary* resolvedTypes = IxSourceUnitCollection_getResolvedTypes( sourceUnits );
            const Dictionary* signatures    = IxSourceUnitCollection_getSignatures   ( sourceUnits );
            const Array*      entries       = Dictionary_getEntries( signatures );
            {
                StringBuffer_append( sb, "\n" );
                int n = Array_getLength( entries );
                for ( int i=0; i < n; i++ )
                {
                    const Entry*             entry      = (const Entry*) Array_getObject( entries, i );
                    const String*            key        = Entry_getKey( entry );
                    const IxSourceSignature* sig        = (IxSourceSignature*) Entry_getValue( entry );
                    {
                        CSignature* csig = CSignature_new( sig, resolvedTypes );
                        {
                            StringBuffer_append( sb, String_content( CSignature_getReturnType( csig ) ) );
                            StringBuffer_append( sb, "\n" );
                            StringBuffer_append( sb, String_content( CSignature_getFunctionName( csig ) ) );
                            StringBuffer_append( sb, "\n" );
                            StringBuffer_append( sb, String_content( CSignature_getParameters( csig ) ) );
                            StringBuffer_append( sb, ";\n" );
                            StringBuffer_append( sb, "\n" );
                        }
                        CSignature_free( &csig );
                    }
                }
                st_signatures = StringBuffer_toString( sb );
            }
        }
        StringBuffer_free( &sb );
    }
    return st_signatures;
}
~
