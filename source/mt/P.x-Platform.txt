
~!include/ix/Platform.h~
#ifndef IX_PLATFORM_H
#define IX_PLATFORM_H

void* Platform_Alloc                 ( int size_of );
void* Platform_Array                 ( int num, int size_of );
void* Platform_Free                  ( void* mem );

void  Platform_Exit                  ( int status );

bool  Platform_File_WriteContents    ( const char* location, const char* content, bool force );
char* Platform_File_GetContents      ( const char* location );

bool  Platform_Location_Exists       ( const char* location );
char* Platform_Location_FullPath     ( const char* location );
bool  Platform_Location_IsDirectory  ( const char* location );
bool  Platform_Location_IsReadable   ( const char* location );
bool  Platform_Location_IsRegularFile( const char* location );
bool  Platform_Location_IsWritable   ( const char* location );

bool  Platform_Path_Create           ( const Path* path     );

#endif
~

~!c/ix/posix/Platform.c~
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <fcntl.h>
#include <linux/limits.h>

#include "ix.h"
~

~c/ix/posix/Platform.c~
void* Platform_Alloc( int size_of )
{
    return calloc( 1, size_of );
}
~

~c/ix/posix/Platform.c~
void* Platform_Array( int num, int size_of )
{
    return calloc( num, size_of );
}
~

~c/ix/posix/Platform.c~
void* Platform_Free( void* mem )
{
    void** obj = (void**) mem;

    free( *obj ); *obj = 0;

    return *obj;
}
~

~c/ix/posix/Platform.c~
void Platform_Exit( int status )
{
    exit( status );
}
~

~c/ix/posix/Platform.c~
bool Platform_File_WriteContents( const char* location, const char* content, bool force )
{
    bool success = FALSE;

    FILE* fp = force ? fopen( location, "w+" ) : fopen( location, "w" );

    if ( fp )
    {
        int   n       = String_Length( content );
        int   written = fwrite( content, sizeof(char), n, fp );

        success = (n == written);
    }
    return success;
}
~

~c/ix/posix/Platform.c~
char* Platform_File_GetContents( const char* location )
{
    char* content = null;
    FILE* fp      = fopen( location, "r" );

    if ( fp )
    {
        struct stat buf;

        if( 0 == lstat( location, &buf ) )
        {
            int size = buf.st_size;

            content = Platform_Array( size + 1, sizeof( char ) );

            int red = fread( content, size, 1, fp );
        }
    }
    return content;
}
~

~c/ix/posix/Platform.c~
bool Platform_Location_Exists( const char* location )
{
    struct stat sb;

    return (F_OK == stat( location, &sb ));
}
~

~c/ix/posix/Platform.c~
char* Platform_Location_FullPath( const char* location )
{
    char* ret = calloc( PATH_MAX, sizeof( char ) );

    if ( '/' == location[0] )
    {
        return strcpy( ret, location );
    }
    else
    {
        getcwd( ret, PATH_MAX );
        int last = strlen( ret );
        if ( '/' != ret[last-1] )
        {
            strcpy( &ret[last++], "/" );
        }
        strcpy( &ret[last], location );
    }

    return ret;
}
~

~c/ix/posix/Platform.c~
bool Platform_Location_IsDirectory( const char* location )
{
    struct stat sb;

    stat( location, &sb );

    switch( sb.st_mode & S_IFMT )
    {
    case S_IFDIR:
        return TRUE;
    
    default:
        return FALSE;
    }
}
~

~c/ix/posix/Platform.c~
bool Platform_Location_IsReadable( const char* location )
{
    return (F_OK == access( location, R_OK ));
}
~

~c/ix/posix/Platform.c~
bool Platform_Location_IsRegularFile( const char* location )
{
    struct stat sb;

    stat( location, &sb );

    switch( sb.st_mode & S_IFMT )
    {
    case S_IFREG:
        return TRUE;
    
    default:
        return FALSE;
    }
}
~

~c/ix/posix/Platform.c~
bool Platform_Location_IsWritable( const char* location )
{
    return (F_OK == access( location, W_OK ));
}
~

~c/ix/posix/Platform.c~
bool Platform_Path_Create( const Path* path )
{
    bool success = FALSE;

    if ( Platform_Location_Exists( Path_getFullPath( path ) ) )
    {
        success = TRUE;
    }
    else
    {
        Path* parent = Path_getParent( path );
        if ( Platform_Path_Create( parent ) )
        {
            if ( 0 == mkdir( Path_getFullPath( path ), 0750 ) )
            {
                success = TRUE;
            }
        }
        Path_free( &parent );
    }
    return success;
}
~
