
.. Ix Source Signature

~!include/ixcompiler.IxSourceSignature.h~
#ifndef IXCOMPILER_IXSOURCESIGNATURE_H
#define IXCOMPILER_IXSOURCESIGNATURE_H

#include "ixcompiler.h"

IxSourceSignature* IxSourceSignature_new( const IxSourceUnit* sourceUnit, const Node* accessModifierNode );

IxSourceSignature*    IxSourceSignature_free             (       IxSourceSignature** self );
//const IxSourceMethod* IxSourceSignature_getMethod        ( const IxSourceSignature*  self );
const String*         IxSourceSignature_getAccessModifier( const IxSourceSignature*  self );
const String*         IxSourceSignature_getConst         ( const IxSourceSignature*  self );
bool                  IxSourceSignature_isConst          ( const IxSourceSignature*  self );
bool                  IxSourceSignature_isClass          ( const IxSourceSignature*  self );
const String*         IxSourceSignature_getMethodName    ( const IxSourceSignature*  self );
const Array*          IxSourceSignature_getParameters    ( const IxSourceSignature*  self );
const IxSourceType*   IxSourceSignature_getReturnType    ( const IxSourceSignature*  self );
String*               IxSourceSignature_generateName     ( const IxSourceSignature*  self, const char* prefix );
const IxSourceUnit*   IxSourceSignature_getSourceUnit    ( const IxSourceSignature*  self );

#endif
~

~!c/ixcompiler.IxSourceSignature.c~
#include "ixcompiler.Array.h"
#include "ixcompiler.EnumTokenType.h"
#include "ixcompiler.IxSourceParameter.h"
#include "ixcompiler.IxSourceSignature.h"
#include "ixcompiler.IxSourceType.h"
#include "ixcompiler.IxSourceUnit.h"
#include "ixcompiler.Node.h"
#include "ixcompiler.NodeIterator.h"
#include "ixcompiler.Platform.h"
#include "ixcompiler.String.h"
#include "ixcompiler.StringBuffer.h"
#include "ixcompiler.Token.h"

struct _IxSourceSignature
{
    const IxSourceUnit*       sourceUnit;
    bool                      invalid;
    bool                      isConst;
    bool                      isClass;
    String*                   modifier;     //  public
    String*                   konst;        //  const
    String*                   methodName;   //  getSomething
    Array*                    parameters;   //  ( name: Type*, size: int )
    String*                   oftype;       //  :
    IxSourceType*             returnType;   //  String*
};

void IxSourceSignature_parseModifier    ( IxSourceSignature* self, const Node* modifierNode );
void IxSourceSignature_parseNameChildren( IxSourceSignature* self, const Node* nameNode     );
void IxSourceSignature_parseParameters  ( IxSourceSignature* self, const Node* startNode    );
~

~c/ixcompiler.IxSourceSignature.c~
IxSourceSignature* IxSourceSignature_new( const IxSourceUnit* sourceUnit, const Node* accessModifierNode )
{
    IxSourceSignature* self = Platform_Alloc( sizeof( IxSourceSignature ) );
    if ( self )
    {
        self->sourceUnit = sourceUnit;
        self->modifier   = String_new( "" );
        self->konst      = String_new( "" );
        self->methodName = String_new( "" );
        self->parameters = Array_new( (Destructor) IxSourceSignature_free );
        self->oftype     = String_new( "" );
        self->returnType = IxSourceType_new( String_new( "" ) );

        IxSourceSignature_parseModifier( self, accessModifierNode );
    }
    return self;
}
~

~c/ixcompiler.IxSourceSignature.c~
IxSourceSignature* IxSourceSignature_free( IxSourceSignature** self )
{
    if ( *self )
    {
        String_free      ( &(*self)->modifier   );
        String_free      ( &(*self)->konst      );
        String_free      ( &(*self)->methodName );
        Array_free       ( &(*self)->parameters );
        String_free      ( &(*self)->oftype     );
        IxSourceType_free( &(*self)->returnType );
        Platform_Free    (    self              );
    }
    return *self;
}
~

~c/ixcompiler.IxSourceSignature.c~
const String* IxSourceSignature_getAccessModifier( const IxSourceSignature* self )
{
    return self->modifier;
}
~

~c/ixcompiler.IxSourceSignature.c~
const String* IxSourceSignature_getConst( const IxSourceSignature* self )
{
    return self->konst;
}
~

~c/ixcompiler.IxSourceSignature.c~
bool IxSourceSignature_isConst( const IxSourceSignature* self )
{
    return self->isConst;
}
~

~c/ixcompiler.IxSourceSignature.c~
bool IxSourceSignature_isClass( const IxSourceSignature* self )
{
    return self->isClass;
}
~

~c/ixcompiler.IxSourceSignature.c~
const String* IxSourceSignature_getMethodName( const IxSourceSignature* self )
{
    return self->methodName;
}
~

~c/ixcompiler.IxSourceSignature.c~
const Array* IxSourceSignature_getParameters( const IxSourceSignature* self )
{
    return self->parameters;
}
~

~c/ixcompiler.IxSourceSignature.c~
const IxSourceType* IxSourceSignature_getReturnType( const IxSourceSignature* self )
{
    return self->returnType;
}
~

~c/ixcompiler.IxSourceSignature.c~
String* IxSourceSignature_generateName( const IxSourceSignature* self, const char* prefix )
{
    String* name = null;
    {
        StringBuffer* sb = StringBuffer_new();
        {
            StringBuffer_append( sb, prefix );
            StringBuffer_append( sb, "_" );
            StringBuffer_append( sb, String_content( IxSourceSignature_getMethodName( self ) ) );

            name = StringBuffer_toString( sb );
        }
        StringBuffer_free( &sb );
    }

    return name;
}
~

~c/ixcompiler.IxSourceSignature.c~
const IxSourceUnit* IxSourceSignature_getSourceUnit( const IxSourceSignature* self )
{
    return self->sourceUnit;
}
~

~c/ixcompiler.IxSourceSignature.c~
void IxSourceSignature_parseModifier( IxSourceSignature* self, const Node* modifierNode )
{
    const Token* token = Node_getToken( modifierNode );
    
    if ( MODIFIER != Token_getTokenType( token ) )
    {
        self->invalid = TRUE;
    }

    String_free( &self->modifier );
    self->modifier = String_new( Token_getContent( Node_getToken( modifierNode ) ) );

    NodeIterator* it = Node_iterator( modifierNode );

    //  const or class (optional)
    if ( NodeIterator_hasNonWhitespaceOfType( it, KEYWORD ) )
    {
        const Node*  node  = NodeIterator_next( it );
        const Token* token = Node_getToken( node );

        if ( String_Equals( "const", Token_getContent( token ) ) )
        {
            String_free( &(self->konst) );
            self->konst = String_new( Token_getContent( token ) );
            self->isConst = TRUE;
        }
        else
        if ( String_Equals( "class", Token_getContent( token ) ) )
        {
            self->isClass = TRUE;
        }
        else
        {
            self->invalid = TRUE;
        }
    }

    //  const or class (optional)
    if ( NodeIterator_hasNonWhitespaceOfType( it, KEYWORD ) )
    {
        const Node*  node  = NodeIterator_next( it );
        const Token* token = Node_getToken( node );

        if ( String_Equals( "const", Token_getContent( token ) ) )
        {
            String_free( &(self->konst) );
            self->konst = String_new( Token_getContent( token ) );
            self->isConst = TRUE;
        }
        else
        if ( String_Equals( "class", Token_getContent( token ) ) )
        {
            self->isClass = TRUE;
        }
        else
        {
            self->invalid = TRUE;
        }
    }

    //  name
    if ( NodeIterator_hasNonWhitespaceOfType( it, WORD ) )
    {
        const Node*  node  = NodeIterator_next( it );
        const Token* token = Node_getToken( node );

        String_free( &(self->methodName) );
        self->methodName = String_new( Token_getContent( token ) );

        IxSourceSignature_parseNameChildren( self, node );
    }
    else
    {
        self->invalid = TRUE;
    }
}
~

~c/ixcompiler.IxSourceSignature.c~
void IxSourceSignature_parseNameChildren( IxSourceSignature* self, const Node* nameNode )
{
    NodeIterator* it = Node_iterator( nameNode );

    //  '(' START
    if ( NodeIterator_hasNonWhitespaceOfType( it, STARTEXPRESSION ) )
    {
        const Node* startNode = NodeIterator_next( it );
        IxSourceSignature_parseParameters( self, startNode );
    }
    else
    {
        self->invalid = TRUE;
    }

    if ( String_equals_chars( self->methodName, "new" ) )
    {
        self->returnType = IxSourceType_new( IxSourceUnit_getName( self->sourceUnit ) );
        IxSourceType_setAsPointer( self->returnType, TRUE );
    }
    else
    if ( NodeIterator_hasNonWhitespaceOfType( it, OFTYPE ) )
    {
        String_free( &(self->oftype) );
        self->oftype = String_new( Token_getContent( Node_getToken( NodeIterator_next( it ) ) ) );

        if ( NodeIterator_hasNonWhitespaceOfType( it, PRIMITIVE ) || NodeIterator_hasNonWhitespaceOfType( it, WORD ) )
        {
            IxSourceType_free( &(self->returnType) );
            self->returnType = IxSourceType_new( String_new( Token_getContent( Node_getToken( NodeIterator_next( it ) ) ) ) );
        }
        else
        {
            self->invalid = TRUE;
        }
    }
}
~

~c/ixcompiler.IxSourceSignature.c~
void IxSourceSignature_parseParameters( IxSourceSignature* self, const Node* startNode )
{
    NodeIterator* it = Node_iterator( startNode );

    while ( NodeIterator_hasNonWhitespaceOfType( it, WORD ) )
    {
        const Node* wordNode = NodeIterator_next( it );

        Array_push( self->parameters, Give( IxSourceParameter_new( wordNode ) ) );
    }
}
~
