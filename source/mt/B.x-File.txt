
.. File

~!include/ix/File.h~
#ifndef IX_FILE_H
#define IX_FILE_H

#include "ix.h"

File*       File_new        ( const char* filepath );

File*       File_free       (       File** self );
bool        File_canRead    ( const File*  self );
const char* File_getFilePath( const File*  self );
bool        File_exists     ( const File*  self );

#endif
~

~!c/ix/File.c~
#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <fcntl.h>
#include "ix.h"

struct _File
{
    const char* filepath;
    bool        canRead;
    bool        exists;
};

static bool File_IsReadable   ( const char* filepath );
static bool File_IsRegularFile( const char* filepath );
~

~c/ix/File.c~
File* File_new( const char* filepath )
{
    File* self = calloc( 1, sizeof( File ) );
    if ( self )
    {
        self->filepath = filepath;
        self->canRead  = File_IsReadable   ( filepath );
        self->exists   = File_IsRegularFile( filepath );
    }
    return self;
}
~

~c/ix/File.c~
File* File_free( File** self )
{
    free( *self ); *self = 0;

    return *self;
}
~

~c/ix/File.c~
bool File_canRead( const File* self )
{
    return self->canRead;
}
~

~c/ix/File.c~
const char* File_getFilePath( const File* self )
{
    return self->filepath;
}
~

~c/ix/File.c~
bool File_exists( const File* self )
{
    return self->exists;
}
~

~c/ix/File.c~
bool File_IsReadable( const char* filepath )
{
    return (F_OK == access( filepath, R_OK ));
}
~

~c/ix/File.c~
bool File_IsRegularFile( const char* filepath )
{
    struct stat sb;

    stat( filepath, &sb );

    switch( sb.st_mode & S_IFMT )
    {
    case S_IFREG:
        return TRUE;
    
    default:
        return FALSE;
    }
}
~
