
.. Ix Source Method

~!include/ixcompiler.IxSourceMethod.h~
#ifndef IXCOMPILER_IXSOURCEMETHOD_H
#define IXCOMPILER_IXSOURCEMETHOD_H

#include "ixcompiler.h"

IxSourceMethod* IxSourceMethod_new( const Node* modifierNode );

IxSourceMethod* IxSourceMethod_free             (       IxSourceMethod** self );
const char*     IxSourceMethod_getAccessModifier( const IxSourceMethod*  self );
const char*     IxSourceMethod_getConst         ( const IxSourceMethod*  self );
const char*     IxSourceMethod_getMethodName    ( const IxSourceMethod*  self );
const char*     IxSourceMethod_getReturnType    ( const IxSourceMethod*  self );

#endif
~

~!c/ixcompiler.IxSourceMethod.c~
#include "ixcompiler.ArrayOfIxSourceParameter.h"
//#include "ixcompiler.ArrayOfIxSourceStatement.h"
#include "ixcompiler.Console.h"
#include "ixcompiler.EnumTokenType.h"
#include "ixcompiler.IxSourceMethod.h"
#include "ixcompiler.Node.h"
#include "ixcompiler.NodeIterator.h"
#include "ixcompiler.Platform.h"
#include "ixcompiler.String.h"
#include "ixcompiler.Token.h"

struct _IxSourceMethod
{
    bool                      invalid;
    bool                      isConst;
    String*                   modifier;     //  public
    String*                   konst;        //  const
    String*                   methodName;   //  getSomething
    ArrayOfIxSourceParameter* parameters;   //  ( name: Type*, size: int )
    String*                   oftype;       //  :
    String*                   returnType;   //  String*
    ArrayOfIxSourceStatement* statements;   //  ...
};

void IxSourceMethod_parseModifier    ( IxSourceMethod* self, const Node* modifierNode );
void IxSourceMethod_parseNameChildren( IxSourceMethod* self, const Node* nameNode     );
~

~c/ixcompiler.IxSourceMethod.c~
IxSourceMethod* IxSourceMethod_new( const Node* modifierNode )
{
    IxSourceMethod* self = Platform_Alloc( sizeof( IxSourceMethod ) );
    if ( self )
    {
        self->modifier   = String_new( "" );
        self->konst      = String_new( "" );
        self->methodName = String_new( "" );
        self->oftype     = String_new( "" );
        self->returnType = String_new( "" );

        self->parameters = ArrayOfIxSourceParameter_new();
        //self->statements = ArrayOfIxSourceStatement_new();

        IxSourceMethod_parseModifier( self, modifierNode );
    }
    return self;
}
~

~c/ixcompiler.IxSourceMethod.c~
IxSourceMethod* IxSourceMethod_free( IxSourceMethod** self )
{
    if ( *self )
    {
        Platform_Free( self );
    }
    return *self;
}
~

~c/ixcompiler.IxSourceMethod.c~
const char* IxSourceMethod_getAccessModifier( const IxSourceMethod* self )
{
    return String_content( self->modifier );
}
~

~c/ixcompiler.IxSourceMethod.c~
const char* IxSourceMethod_getConst( const IxSourceMethod* self )
{
    return (null != self->konst) ? String_content( self->konst ) : "";
}
~

~c/ixcompiler.IxSourceMethod.c~
const char* IxSourceMethod_getMethodName( const IxSourceMethod* self )
{
    return String_content( self->methodName );
}
~

~c/ixcompiler.IxSourceMethod.c~
const char* IxSourceMethod_getReturnType( const IxSourceMethod*  self )
{
    return String_content( self->returnType );
}
~

~c/ixcompiler.IxSourceMethod.c~
void IxSourceMethod_parseModifier( IxSourceMethod* self, const Node* modifierNode )
{
    const Token* token = Node_getToken( modifierNode );
    
    if ( MODIFIER != Token_getTokenType( token ) )
    {
        self->invalid = TRUE;
    }

    self->modifier = String_new( Token_getContent( Node_getToken( modifierNode ) ) );

    NodeIterator* it = Node_iterator( modifierNode );

    //  const (optional)
    if ( NodeIterator_hasNonWhitespaceOfType( it, KEYWORD ) )
    {
        const Node*  node  = NodeIterator_next( it );
        const Token* token = Node_getToken( node );

        if ( String_Equals( "const", Token_getContent( token ) ) )
        {
            String_free( &(self->konst) );
            self->konst = String_new( Token_getContent( token ) );
            self->isConst = TRUE;
        }
        else
        {
            self->invalid = TRUE;
        }
    }

    //  name
    if ( NodeIterator_hasNonWhitespaceOfType( it, WORD ) )
    {
        const Node*  node  = NodeIterator_next( it );
        const Token* token = Node_getToken( node );

        String_free( &(self->methodName) );
        self->methodName = String_new( Token_getContent( token ) );

        IxSourceMethod_parseNameChildren( self, node );
    }
    else
    {
        self->invalid = TRUE;
    }
}
~

~c/ixcompiler.IxSourceMethod.c~
void IxSourceMethod_parseNameChildren( IxSourceMethod* self, const Node* nameNode )
{
    NodeIterator* it = Node_iterator( nameNode );

    //  '(' START
    if ( NodeIterator_hasNonWhitespaceOfType( it, STARTEXPRESSION ) )
    {
        NodeIterator_next( it );
        Console_Write( "Has Parameters\n", null );
        //
    }
    else
    {
        self->invalid = TRUE;
    }

    if ( NodeIterator_hasNonWhitespaceOfType( it, OFTYPE ) )
    {
        String_free( &(self->oftype) );
        self->oftype = String_new( Token_getContent( Node_getToken( NodeIterator_next( it ) ) ) );

        if ( NodeIterator_hasNonWhitespaceOfType( it, PRIMITIVE ) || NodeIterator_hasNonWhitespaceOfType( it, PRIMITIVE ) )
        {
            String_free( &(self->returnType) );
            self->returnType = String_new( Token_getContent( Node_getToken( NodeIterator_next( it ) ) ) );
        }
        else
        {
            self->invalid = TRUE;
        }
    }
}
~