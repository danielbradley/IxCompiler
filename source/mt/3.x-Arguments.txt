
.. Arguments

~!include/ixcompiler.Arguments.h~
#ifndef IXCOMPILER_ARGUMENTS_H
#define IXCOMPILER_ARGUMENTS_H

typedef struct _Arguments Arguments;

Arguments*     Arguments_new          ( int argc, char** argv );
Arguments*     Arguments_free         ( Arguments** self );
bool           Arguments_hasFlag      ( Arguments* self, const char* argument );
const char*    Arguments_getOption    ( Arguments* self, const char* argument );
FilesIterator* Arguments_filesIterator( Arguments* self );

#endif
~

~!c/ixcompiler.Arguments.c~
#include <stdlib.h>

#include "ixcompiler.h"
#include "ixcompiler.Arguments.h"
#include "todo.h"

struct _Arguments
{
    bool        dryRun;
    const char* outputDir;
    const char* targetLanguage;
};
~

~c/ixcompiler.Arguments.c~
Arguments* Arguments_new( int argc, char** argv )
{
    Arguments* self = calloc( 1, sizeof( Arguments ) );
    if ( self )
    {
        for ( int i=0; i < argc; i++ )
        {
            if ( String_Equals( argv[i], ARGUMENT_DRY_RUN ) )
            {
                self->dryRun = TRUE;
            }
            else
            if ( String_Equals( argv[i], ARGUMENT_OUTPUT_DIR) )
            {
                i++;
                if ( i < argc )
                {
                    self->outputDir = argv[i];
                }
            }
            else
            if ( String_Equals( argv[i], ARGUMENT_TARGET_LANGUAGE) )
            {
                i++;
                if ( i < argc )
                {
                    self->targetLanguage = argv[i];
                }
            }
        }
    }
    return self;
}
~

~c/ixcompiler.Arguments.c~
Arguments* Arguments_free( Arguments** self )
{
    free( *self );
    self = 0;
    return null;
}
~

~c/ixcompiler.Arguments.c~
bool Arguments_hasFlag( Arguments* self, const char* argument )
{
    if ( String_Equals( argument, ARGUMENT_DRY_RUN ) )
    {
        return self->dryRun;
    }
    else
    if ( String_Equals( argument, ARGUMENT_OUTPUT_DIR ) )
    {
        return (0 != self->outputDir);
    }
    else
    if ( String_Equals( argument, ARGUMENT_TARGET_LANGUAGE ) )
    {
        return (0 != self->targetLanguage);
    }
    else
    {
        Console_Write( "Implementation error in Arguments_hasFlag - 'argument' must be an ARGUMENT defined constant.", "" );
        exit( -1 );
    }
}
~

~c/ixcompiler.Arguments.c~
const char* Arguments_getOption( Arguments* self, const char* argument )
{
    if ( String_Equals( argument, ARGUMENT_DRY_RUN ) )
    {
        Console_Write( "Implementation error in Arguments_getOption - ARGUMENT_DRY_RUN is not valid for this function.", "" );
        exit( -1 );
    }
    else
    if ( String_Equals( argument, ARGUMENT_OUTPUT_DIR ) )
    {
        return (0 != self->outputDir) ? self->outputDir : "";
    }
    else
    if ( String_Equals( argument, ARGUMENT_TARGET_LANGUAGE ) )
    {
        return (0 != self->targetLanguage) ? self->targetLanguage : "";
    }
    else
    {
        Console_Write( "Implementation error in Arguments_hasFlag - 'argument' must be an ARGUMENT defined constant.", "" );
        exit( -1 );
    }
}
~

~c/ixcompiler.Arguments.c~
FilesIterator* Arguments_filesIterator( Arguments* self )                     { return null; }
~