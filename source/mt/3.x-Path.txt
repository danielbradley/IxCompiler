
.. Path

~!include/ixcompiler.Path.h~
#ifndef IXCOMPILER_PATH_H
#define IXCOMPILER_PATH_H

Path* Path_new     ( const char* target );
Path* Path_free    ( Path** self )       ;
bool  Path_exists  ( Path* self )        ;
bool  Path_canWrite( Path* self )        ;

#endif
~

~!c/ixcompiler.Path.c~
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <fcntl.h>
#include <linux/limits.h>
#include "ixcompiler.h"
#include "ixcompiler.Path.h"

struct _Path
{
    bool  exists;
    bool  canWrite;
    char* path;
};

static bool  IsFolderAndExists  ( const char* target );
static bool  IsFolderAndCanWrite( const char* target );
static char* FullyQualifiedPath ( const char* target );
~


~c/ixcompiler.Path.c~
Path* Path_new( const char* target )
{
    Path* self = calloc( 1, sizeof( Path ) );
    if ( self )
    {
        self->exists   = IsFolderAndExists  ( target );
        self->canWrite = IsFolderAndCanWrite( target );
        self->path     = FullyQualifiedPath ( target );
    }

    return self;
}
~

~c/ixcompiler.Path.c~
Path* Path_free( Path** self )
{
    free( (*self)->path );
    free( *self ); *self = 0;

    return *self;
}
~

~c/ixcompiler.Path.c~
bool Path_exists( Path* self )
{
    return self->exists;
}
~

~c/ixcompiler.Path.c~
bool Path_canWrite( Path* self )
{
    return self->canWrite;
}
~

~c/ixcompiler.Path.c~
bool IsFolderAndExists( const char* target )
{
    struct stat sb;

    stat( target, &sb );

    switch( sb.st_mode & S_IFMT )
    {
    case S_IFDIR:
        return TRUE;
    
    default:
        return FALSE;
    }
};
~

~c/ixcompiler.Path.c~
bool IsFolderAndCanWrite( const char* target )
{
    return (F_OK == access( target, W_OK ));
}
~

~c/ixcompiler.Path.c~
char* FullyQualifiedPath ( const char* target )
{
    char* ret = calloc( PATH_MAX, sizeof( char ) );

    if ( '/' == target[0] )
    {
        return strcpy( ret, target );
    }
    else
    {
        getcwd( ret, PATH_MAX );
        int last = strlen( ret );
        if ( '/' != ret[last-1] )
        {
            strcpy( &ret[last++], "/" );
        }
        strcpy( &ret[last], target );
    }

    return ret;
}
~