
.. Array

~!include/ixcompiler.Array.h~
#ifndef IXCOMPILER_ARRAY_H
#define IXCOMPILER_ARRAY_H

#include "ixcompiler.h"

Array* Array_new           ();
Array* Array_new_destructor( Destructor destructor );
Array* Array_free          ( Array** self );
Array* Array_push          ( Array*  self, void** object );
void*  Array_pop           ( Array*  self );
void*  Array_shift         ( Array*  self );
Array* Array_unshift       ( Array*  self, void** object );


int         Array_getLength( const Array* self            );
const void* Array_getObject( const Array* self, int index );

#endif
~

~!c/ixcompiler.Array.c~
#include "ixcompiler.Array.h"
#include "ixcompiler.Platform.h"

struct _Array
{
    Destructor destroy;
    void**     objects;
    int        length;
    int        size;
};
~

~c/ixcompiler.Array.c~
static void Array_expand( Array* self )
{
    if ( 0 == self->size )
    {
        self->objects = (void**) Platform_Array( 1, sizeof( void* ) );
        self->size    = 1;
    }
    else
    {
        int new_size = self->size * 2;

        void** tmp = (void**) Platform_Array( new_size, sizeof( void* ) );

        for ( int i=0; i < self->length; i++ )
        {
            tmp[i] = self->objects[i];
        }

        Platform_Free( &self->objects );

        self->objects = tmp;
        self->size    = new_size;
    }
}
~

~c/ixcompiler.Array.c~
Array* Array_new()
{
    Array* self = Platform_Alloc( sizeof( Array ) );

    if ( self )
    {
        self->destroy = 0;
        self->objects = 0;
        self->length  = 0;
        self->size    = 0;
    }
    return self;
}
~

~c/ixcompiler.Array.c~
Array* Array_new_destructor( Destructor destructor )
{
    Array* self = Platform_Alloc( sizeof( Array ) );

    if ( self )
    {
        self->destroy = destructor;
        self->objects = 0;
        self->length  = 0;
        self->size    = 0;
    }
    return self;
}
~

~c/ixcompiler.Array.c~
Array* Array_free( Array** self )
{
    if ( *self )
    {
        if ( (*self)->destroy )
        {
            void* object;
            while ( (object = Array_pop( *self )) )
            {
                (*self)->destroy( &object );
            }
        }

        Platform_Free( &(*self)->objects );
        Platform_Free( self );
    }
    return *self;
}
~

~c/ixcompiler.Array.c~
Array* Array_push( Array* self, void** object )
{
    if ( self->length == self->size )
    {
        Array_expand( self );
    }

    self->objects[self->length++] = *object;
    *object = 0;

    return self;
}
~

~c/ixcompiler.Array.c~
void* Array_pop( Array* self )
{
    void* ret = null;

    if ( 0 < self->length )
    {
        --self->length;
        ret = self->objects[self->length]; self->objects[self->length] = null;
    }
    return ret;
}
~

~c/ixcompiler.Array.c~
void* Array_shift( Array* self )
{
    if ( self->length )
    {
        void* head = self->objects[0];

        for ( int i=1; i < self->length; i++ )
        {    
            self->objects[i-1] = self->objects[i];
            self->objects[i]   = 0;
        }
        self->length--;
        return head;
    }
    else
    {
        return null;
    }
}
~

~c/ixcompiler.Array.c~
Array* Array_unshift( Array* self, void** object )
{
    if ( self->length == self->size )
    {
        Array_expand( self );
    }

    for ( int i=self->length; 0 < i; i-- )
    {    
        self->objects[i]   = self->objects[i-1];
        self->objects[i-1] = 0;
    }
    self->objects[0] = object;

    self->length++;

    return self;
}
~

~c/ixcompiler.Array.c~
int Array_getLength( const Array* self )
{
    return self->length;
}
~

~c/ixcompiler.Array.c~
const void* Array_getObject( const Array* self, int index )
{
    if ( index < self->length )
    {
        return self->objects[index];
    }
    else
    {
        return null;
    }
}
~
