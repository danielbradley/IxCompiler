
... Generate C Source File

~c/ixcompiler.GeneratorForC.c~
static String* GenerateSourceFile                ( const IxSourceUnitCollection* sourceUnits );
static String* GenerateIncludes                  ( const IxSourceUnitCollection* sourceUnits );
static String* GenerateStructs                   ( const IxSourceUnitCollection* sourceUnits );
static String* GenerateStructForSourceUnit       ( const IxSourceUnit*           sourceUnit, const Dictionary* resolvedTypes );
static String* GenerateStructMembersForSourceUnit( const IxSourceUnit*           sourceUnit, const Dictionary* resolvedTypes );
static String* GenerateMethods                   ( const IxSourceUnitCollection* sourceUnits );
static String* GenerateMethodsForSourceUnit      ( const IxSourceUnit*           sourceUnit, const Dictionary* resolvedTypes );
static String* GenerateFunctionForMethod         ( const IxSourceMethod*         method,     const Dictionary* resolvedTypes, const char* classPrefix );
static String* GenerateParametersForMethod       ( const IxSourceMethod*         method,     const Dictionary* resolvedTypes );
~

~c/ixcompiler.GeneratorForC.c~
static void GenerateAndWriteSourceFile( const IxSourceUnitCollection* sourceUnits, const String* outputDir )
{
    if ( 0 < IxSourceUnitCollection_getLength( sourceUnits ) )
    {
        String*             content     = GenerateSourceFile( sourceUnits );
        const IxSourceUnit* first       = IxSourceUnitCollection_get( sourceUnits, 0 );
        const String*       package     = IxSourceUnit_getPackage( first );
        String*             source      = String_cat( outputDir, package );
        String*             extension   = String_new( ".c" );
        String*             source_full = String_cat( source, extension );

        if ( Platform_File_WriteContents( String_content( source_full ), String_content( content ), TRUE ) )
        {
            Console_Write( "Wrote Source: %s\n", String_content( source_full ) );
        }
        else
        {
            Console_Write( "Could not write source: %s\n", String_content( source_full ) );
        }

        String_free( &content     );
        String_free( &source      );
        String_free( &extension   );
        String_free( &source_full );
    }
}
~

~c/ixcompiler.GeneratorForC.c~
static String* GenerateSourceFile( const IxSourceUnitCollection* sourceUnits )
{
    String* ret = null;
    {
        StringBuffer* sb = StringBuffer_new();

        StringBuffer_appendLine_prefix_optional( sb, "#include", (String**) Give( GenerateIncludes( sourceUnits ) ) );
        StringBuffer_appendLine_prefix_optional( sb,         "", (String**) Give( GenerateStructs ( sourceUnits ) ) );
        StringBuffer_appendLine_prefix_optional( sb,         "", (String**) Give( GenerateMethods ( sourceUnits ) ) );

        ret = String_new( StringBuffer_content( sb ) );
    }
    return ret;
}
~

~c/ixcompiler.GeneratorForC.c~
static String* GenerateIncludes( const IxSourceUnitCollection* sourceUnits )
{
    String* includes = null;
    {
        const IxSourceUnit* first       = IxSourceUnitCollection_get( sourceUnits, 0 );
        const String*       package     = IxSourceUnit_getPackage( first );

        StringBuffer* sb = StringBuffer_new();
        StringBuffer_append( sb, "\"" );
        StringBuffer_append( sb, String_content( package ) );
        StringBuffer_append( sb, ".h" );
        StringBuffer_append( sb, "\"" );

        includes = StringBuffer_toString( sb );

        StringBuffer_free( &sb );
    }
    return includes;
}
~

~c/ixcompiler.GeneratorForC.c~
static String* GenerateStructs( const IxSourceUnitCollection* sourceUnits )
{
    const Dictionary* resolvedTypes = IxSourceUnitCollection_getResolvedTypes( sourceUnits );

    String* structs = null;
    {
        StringBuffer* sb = StringBuffer_new();
        {
            int n = IxSourceUnitCollection_getLength( sourceUnits );

            for ( int i=0; i < n; i++ )
            {
                const IxSourceUnit* sourceUnit = IxSourceUnitCollection_get( sourceUnits, i );

                StringBuffer_appendLine_prefix_optional( sb, "", (String**) Give( GenerateStructForSourceUnit( sourceUnit, resolvedTypes ) ) );
            }
            structs = StringBuffer_toString( sb );
        }
        StringBuffer_free( &sb );
    }
    return structs;
}
~

~c/ixcompiler.GeneratorForC.c~
static String* GenerateStructForSourceUnit( const IxSourceUnit* sourceUnit, const Dictionary* resolvedTypes )
{
    String* _struct = null;
    {
        StringBuffer* sb = StringBuffer_new();
        {
            const String* package = IxSourceUnit_getPackage( sourceUnit );
            const String* name    = IxSourceUnit_getName   ( sourceUnit );
            {
                String* pkg = String_replace( package, '.', '_' );

                StringBuffer_append( sb, "\n" );
                StringBuffer_append( sb, "struct" );
                StringBuffer_append( sb, " " );
                StringBuffer_append( sb, "_" );
                StringBuffer_append( sb, String_content( pkg  ) );
                StringBuffer_append( sb, "_" );
                StringBuffer_append( sb, String_content( name ) );
                StringBuffer_append( sb, "\n" );
                StringBuffer_append( sb, "{" );
                StringBuffer_appendLine_prefix_optional( sb, "", (String**) Give( GenerateStructMembersForSourceUnit( sourceUnit, resolvedTypes ) ) );
                StringBuffer_append( sb, "};" );

                String_free( &pkg );
            }
            _struct = StringBuffer_toString( sb );
        }
        StringBuffer_free( &sb );
    }
    return _struct;
}
~

~c/ixcompiler.GeneratorForC.c~
static String* GenerateStructMembersForSourceUnit( const IxSourceUnit* sourceUnit, const Dictionary* resolvedTypes )
{
    String* members = null;
    {
        StringBuffer* sb = StringBuffer_new();
        {
            const IxSourceClass* class = IxSourceUnit_getClass( sourceUnit );
            const Array*         array = IxSourceClass_getMembers( class );
            {
                int n = Array_getLength( array );
                for ( int i=0; i < n; i++ )
                {
                    const IxSourceMember* member = (IxSourceMember*) Array_getObject( array, i );

                    if ( IxSourceMember_isInstance( member ) )
                    {
                        StringBuffer_append( sb, "\n" );
                        StringBuffer_append( sb, "\t" );

                        const IxSourceType* type = IxSourceMember_getType( member );
                        const String*       name = IxSourceType_getName( type );
                        const String*       full = null;

                        if
                        (
                            IxSourceType_isFullName( type )
                            ||
                            IxSourceType_isPrimitive( type )
                        )
                        {
                            full = name;
                        }
                        else
                        {
                            full = Dictionary_get( resolvedTypes, name );
                        }

                        String* converted = (full) ? String_replace( full, '.', '_' ) : String_new( "" );
                        {
                            StringBuffer_append( sb, String_content( converted ) );
                            if ( IxSourceType_isPointer( type ) )
                            {
                                StringBuffer_append( sb, "*"  );
                            }

                            if ( IxSourceType_isReference( type ) )
                            {
                                StringBuffer_append( sb, "* REF"  );
                            }

                            StringBuffer_append( sb, " "  );
                            StringBuffer_append( sb, String_content( IxSourceMember_getName( member ) ) );

                            if ( IxSourceType_isArray( type ) )
                            {
                                StringBuffer_append( sb, "[]" );
                            }
                            StringBuffer_append( sb, ";"  );
                        }   
                        String_free( &converted );
                    }
                }
            }
            members = StringBuffer_toString( sb );
        }
        StringBuffer_free( &sb );
    }
    return members;
}
~

~c/ixcompiler.GeneratorForC.c~
static String* GenerateMethods( const IxSourceUnitCollection* sourceUnits )
{
    const Dictionary* resolvedTypes = IxSourceUnitCollection_getResolvedTypes( sourceUnits );

    String* methods = null;
    {
        StringBuffer* sb = StringBuffer_new();
        {
            int n = IxSourceUnitCollection_getLength( sourceUnits );

            for ( int i=0; i < n; i++ )
            {
                const IxSourceUnit* sourceUnit = IxSourceUnitCollection_get( sourceUnits, i );
                StringBuffer_appendLine_prefix_optional( sb, "", (String**) Give( GenerateMethodsForSourceUnit( sourceUnit, resolvedTypes ) ) );
            }
            methods = StringBuffer_toString( sb );
        }
        StringBuffer_free( &sb );
    }
    return methods;
}
~

~c/ixcompiler.GeneratorForC.c~
static String* GenerateMethodsForSourceUnit( const IxSourceUnit* sourceUnit, const Dictionary* resolvedTypes )
{
    const char* classPrefix = IxSourceUnit_getPrefix( sourceUnit );

    String* st_methods = null;
    {
        StringBuffer* sb = StringBuffer_new();
        {
            const Array* methods = IxSourceUnit_getMethods( sourceUnit );
            {
                int n = Array_getLength( methods );
                for ( int i=0; i < n; i++ )
                {
                    const IxSourceMethod* method = (IxSourceMethod*) Array_getObject( methods, i );
                    StringBuffer_appendLine_prefix_optional( sb, "", (String**) Give( GenerateFunctionForMethod( method, resolvedTypes, classPrefix ) ) );
                }
            }
            st_methods = StringBuffer_toString( sb );
        }
        StringBuffer_free( &sb );
    }
    return st_methods;
}
~

~c/ixcompiler.GeneratorForC.c~
static String* GenerateFunctionForMethod( const IxSourceMethod* method, const Dictionary* resolvedTypes, const char* classPrefix )
{
    const IxSourceSignature* ixSig = IxSourceMethod_getSignature( method );

    CSignature* csig = CSignature_new( ixSig, resolvedTypes );

    String* st_method = null;
    {
        StringBuffer* sb = StringBuffer_new();
        {
            StringBuffer_append( sb, "// " );
            StringBuffer_append( sb, IxSourceMethod_getAccessModifier( method ) );
            StringBuffer_append( sb, " " );
            StringBuffer_append( sb, IxSourceMethod_getConst( method ) );
            StringBuffer_append( sb, "\n" );
            StringBuffer_append( sb, String_content( CSignature_getReturnType( csig ) ) );
            StringBuffer_append( sb, "\n" );
            StringBuffer_append( sb, String_content( CSignature_getFunctionName( csig ) ) );
            StringBuffer_append( sb, "\n" );
            StringBuffer_append( sb, String_content( CSignature_getParameters( csig ) ) );
            StringBuffer_append( sb, "\n" );
            StringBuffer_append( sb, "{" );
            StringBuffer_append( sb, "\n" );
            StringBuffer_append( sb, "}" );
            StringBuffer_append( sb, "\n" );

            st_method = StringBuffer_toString( sb );
        }
        StringBuffer_free( &sb );
    }
    return st_method;
}
~

~c/ixcompiler.GeneratorForC.c~
static String* GenerateParametersForMethod( const IxSourceMethod* method, const Dictionary* resolvedTypes )
{
    String* st_parameters = null;
    {
        StringBuffer* sb = StringBuffer_new();
        {
            const IxSourceSignature* signature = IxSourceMethod_getSignature( method );

            CSignature* csig = CSignature_new( signature, resolvedTypes );
            {
                StringBuffer_append( sb, String_content( CSignature_getParameters( csig ) ) );
            }
            st_parameters = StringBuffer_toString( sb );
        }
        StringBuffer_free( &sb );
    }
    return st_parameters;
}
~