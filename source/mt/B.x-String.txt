
.. String

~!include/ix/String.h~
#ifndef IX_STRING_H
#define IX_STRING_H

String*        String_new           ( const char* content );
String*        String_free          (       String** self );
const char*    String_content       ( const String*  self );
int            String_getLength     ( const String*  self );
String*        String_copy          ( const String*  self );
String*        String_cat           ( const String*  self, const String* other );
String*        String_cat_chars     ( const String*  self, const char*   chars );
bool           String_equals        ( const String*  self, const String* other );
bool           String_equals_chars  ( const String*  self, const char*   chars );
bool           String_contains      ( const String*  self, const String* other );
bool           String_contains_chars( const String*  self, const char*   chars );
ArrayOfString* String_split         ( const String*  self, char separator      );
String*        String_toUpperCase   ( const String*  self );
String*        String_replace       ( const String*  self, char ch, char with );

String*        String_Cat    ( const char* string1, const char* string2 );
bool           String_Equals ( const char* string1, const char* string2 );
int            String_Length ( const char* s );
char*          String_Copy   ( const char* s );
char*          String_Convert( String** string );

#endif
~

~!c/ix/String.c~
#include <string.h>
#include "ix.h"

struct _String
{
    char* content;
    int   length;
};

String* String_new_keep( char** keep );
~

~c/ix/String.c~
String* String_new( const char* content )
{
    String* self = Platform_Alloc( sizeof(String) );
    if ( self )
    {
        self->content = String_Copy( content );
        self->length  = String_Length( content );
    }
    return self;
}
~

~c/ix/String.c~
String* String_new_keep( char** keep )
{
    String* self = Platform_Alloc( sizeof(String) );
    if ( self )
    {
        self->length  = String_Length( *keep );
        self->content = Take( keep );
    }
    return self;
}
~

~c/ix/String.c~
String* String_free( String** self )
{
    if ( *self )
    {
        Platform_Free( &(*self)->content );
        Platform_Free(    self           );
    }
    return *self;
}
~

~c/ix/String.c~
const char* String_content( const String* self )
{
    return self->content;
}
~

~c/ix/String.c~
int String_getLength( const String* self )
{
    return self->length;
}
~

~c/ix/String.c~
String* String_copy( const String* self )
{
    return String_new( self->content );
}
~

~c/ix/String.c~
String* String_cat( const String* self, const String* other )
{
    return String_cat_chars( self, other->content );
}
~

~c/ix/String.c~
String* String_cat_chars( const String* self, const char* chars )
{
    return String_Cat( self->content, chars );
}
~

~c/ix/String.c~
bool String_equals( const String* self, const String* other )
{
    return String_Equals( self->content, other->content );
}
~

~c/ix/String.c~
bool String_equals_chars( const String* self, const char* chars )
{
    if ( self && chars )
    {
        const char* content = String_content( self );
        return (0 == strcmp( content, chars ));
    }
    else
    {
        return FALSE;
    }
}
~

~c/ix/String.c~
bool String_contains( const String* self, const String* other )
{
    return String_contains_chars( self, String_content( other ) );
}
~

~c/ix/String.c~
bool String_contains_chars( const String* self, const char* chars )
{
    return (NULL != strstr( String_content( self ), chars ));
}
~

~c/ix/String.c~
ArrayOfString* String_split( const String* self, char separator )
{
    ArrayOfString* strings = ArrayOfString_new();
    {
        StringBuffer* sb      = StringBuffer_new();
        const char*   content = String_content( self );
        int           n       = String_getLength( self );

        for ( int i=0; i < n; i++ )
        {
            if ( content[i] == separator )
            {
                if ( !StringBuffer_isEmpty( sb ) )
                {
                    String* sbc = String_new( StringBuffer_content( sb ) );
                    ArrayOfString_push( strings, &sbc );
                    StringBuffer_free( &sb );
                    sb = StringBuffer_new();
                }
            }
            else
            {
                StringBuffer_append_char( sb, content[i] );
            }
        }

        if ( !StringBuffer_isEmpty( sb ) )
        {
            String* sbc = String_new( StringBuffer_content( sb ) );
            ArrayOfString_push( strings, &sbc );
        }
        StringBuffer_free( &sb );
    }
    return strings;
}
~

~c/ix/String.c~
String* String_toUpperCase( const String* self )
{
    String* ret = null;
    {
        char* buffer = String_Copy( self->content );
        int   n      = self->length;

        for ( int i=0; i < n; i++ )
        {
            int ch = buffer[i];

            //    'a'                 'z'
            if ( (97 <= ch) && (ch <= 122) )
            {
                buffer[i] = ch - 32;
            }
        }
        ret = String_new( buffer );
        Platform_Free( &buffer );
    }
    return ret;
}
~

~c/ix/String.c~
String* String_replace( const String* self, char ch, char with )
{
    String* ret = null;
    {
        char* buffer = String_Copy( self->content );
        int   n      = self->length;

        for ( int i=0; i < n; i++ )
        {
            if ( ch == buffer[i] ) buffer[i] = with;
        }
        ret = String_new( buffer );
        Platform_Free( &buffer );
    }
    return ret;
}
~

~c/ix/String.c~
String* String_Cat( const char* s1, const char* s2 )
{
    int len1 = String_Length( s1 );
    int len2 = String_Length( s2 );
    int len  = len1 + len2 + 1;

    char* concatenated = Platform_Array( len, sizeof( char ) );

    int t=0;

    for ( int i=0; i < len1; i++ )
    {
        concatenated[t++] = s1[i];
    }

    for ( int i=0; i < len2; i++ )
    {
        concatenated[t++] = s2[i];
    }

    concatenated[t] = '\0';

    return String_new_keep( &concatenated );
}
~

~c/ix/String.c~
char* String_Copy( const char* s )
{
    int   len  = String_Length( s ) + 2;
    char* copy = Platform_Array( len, sizeof( char ) );

    return strcpy( copy, s );
}
~

~c/ix/String.c~
bool String_Equals( const char* string1, const char* string2 )
{
    if ( (NULL == string1) || (NULL == string2) )
    {
        return FALSE;
    }
    else
    {
        return (0 == strcmp( string1, string2 ));
    }
}
~

~c/ix/String.c~
int String_Length( const char* s )
{
    return strlen( s );
}
~

~c/ix/String.c~
char* String_Convert( String** string )
{
    char* tmp = (*string)->content; (*string)->content = null;

    String_free( string );

    return tmp;
}
~
