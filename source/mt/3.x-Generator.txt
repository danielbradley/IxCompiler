
.. Generator

~!include/ixcompiler.Generator.h~
#ifndef IXCOMPILER_GENERATOR_H
#define IXCOMPILER_GENERATOR_H

Generator* Generator_new     ( const char* lang );
Generator* Generator_free    ( Generator** self );
int        Generator_writeAST( Generator* self, AST* ast, Path* output_path, File* source_file );

#endif
~

~!c/ixcompiler.Generator.c~
#include <stdio.h>
#include "ixcompiler.h"
#include "ixcompiler.AST.h"
#include "ixcompiler.EnumTokenGroup.h"
#include "ixcompiler.Generator.h"
#include "ixcompiler.Node.h"
#include "ixcompiler.NodeIterator.h"
#include "ixcompiler.Platform.h"
#include "ixcompiler.String.h"
#include "ixcompiler.Tree.h"
#include "ixcompiler.Token.h"
#include "ixcompiler.TokenGroup.h"

struct _Generator
{
    char* targetLanguage;
};

static void PrintNode( const Node* node );
static void PrintTree( const Node* node, int indent );
~

~c/ixcompiler.Generator.c~
Generator* Generator_new( const char* target_language )
{
    Generator* self = Platform_Alloc( sizeof( Generator ) );
    if ( self )
    {
        self->targetLanguage = String_Copy( target_language );
    }    

    if ( String_Equals( target_language, LANG_C ) )
    {
        return self;
    }
    else
    {
        return Generator_free( &self );
    }
}
~

~c/ixcompiler.Generator.c~
Generator* Generator_free( Generator** self )
{
    if ( *self )
    {
        Platform_Free( &(*self)->targetLanguage );
        Platform_Free( self );
    }

    return *self;
}
~

~c/ixcompiler.Generator.c~
int Generator_writeAST( Generator* self, AST* ast, Path* output_path, File* source_file )
{
    const Tree* tree = AST_getTree( ast );
    const Node* root = Tree_getRoot( tree );

    //PrintNode( root );
    PrintTree( root, -1 );

    return SUCCESS;
}
~

~c/ixcompiler.Generator.c~
static void PrintNode( const Node* node )
{
    const Token* token = Node_getToken( node );

    if ( token )
    {
        Token_print( token, stdout );
    }

    if ( Node_hasChildren( node ) )
    {
        NodeIterator* it = Node_iterator( node );
        while ( NodeIterator_hasNext( it ) )
        {
            const Node*  child = NodeIterator_next( it );

            PrintNode( child );
        }
        NodeIterator_free( &it );
    }
}
~

~c/ixcompiler.Generator.c~
static void PrintTree( const Node* node, int indent )
{
    const Token* token = Node_getToken( node );

    if ( token )
    {
        EnumTokenGroup token_group = TokenGroup_getGroupType( Token_getTokenGroup( token ) );
        switch( token_group )
        {
        case WHITESPACE:
            break;
        default:
            for ( int i=0; i < indent; i++ )
            {
                fprintf( stdout, "\t" );
            }
            Token_print( token, stdout );
            fprintf( stdout, "\n" );
        }
    }

    if ( Node_hasChildren( node ) )
    {
        NodeIterator* it = Node_iterator( node );
        while ( NodeIterator_hasNext( it ) )
        {
            const Node*  child = NodeIterator_next( it );

            PrintTree( child, indent + 1 );
        }
        NodeIterator_free( &it );
    }
}
~
