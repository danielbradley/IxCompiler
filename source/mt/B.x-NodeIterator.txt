
.. NodeIterator

~!include/ix/NodeIterator.h~
#ifndef IX_NODEITERATOR_H
#define IX_NODEITERATOR_H

#include "ix.h"

NodeIterator* NodeIterator_new                   ( const Array*  nodes );
NodeIterator* NodeIterator_free                  ( NodeIterator** self );
bool          NodeIterator_hasNext               ( NodeIterator*  self );
bool          NodeIterator_hasNonWhitespace      ( NodeIterator*  self );
bool          NodeIterator_hasNonWhitespaceOfType( NodeIterator*  self, EnumTokenType type );
const Node*   NodeIterator_next                  ( NodeIterator*  self );
const Node*   NodeIterator_peek                  ( NodeIterator*  self );
String*       NodeIterator_nextTokenString       ( NodeIterator*  self );


#endif
~

~!c/ix/NodeIterator.c~
#include "ix.h"
#include "ixcompiler.h"
#include "ixcompiler.EnumTokenType.h"
#include "ixcompiler.EnumTokenGroup.h"
#include "ixcompiler.Token.h"
#include "ixcompiler.TokenGroup.h"

struct _NodeIterator
{
    const Array* nodes;
    int          next;
};
~

~c/ix/NodeIterator.c~
NodeIterator* NodeIterator_new( const Array* nodes )
{
    NodeIterator* self = Platform_Alloc( sizeof( NodeIterator ) );
    if ( self )
    {
        self->nodes = nodes;
        self->next  = 0;
    }
    return self;
}
~

~c/ix/NodeIterator.c~
NodeIterator* NodeIterator_free( NodeIterator** self )
{
    if ( *self )
    {
        (*self)->nodes = null;
        (*self)->next  = 0;

        Platform_Free( self );
    }
    return *self;
}
~

~c/ix/NodeIterator.c~
bool NodeIterator_hasNext( NodeIterator* self )
{
    return (self->next < Array_getLength( self->nodes ));
}
~

~c/ix/NodeIterator.c~
bool NodeIterator_hasNonWhitespace( NodeIterator* self )
{
    bool has_next_nws = FALSE;

    while ( NodeIterator_hasNext( self ) )
    {
        const Node*   node  = Array_getObject( self->nodes, self->next );
        const Token*  token = Node_getToken( node );
        EnumTokenType type  = Token_getTokenType( token );

        if ( LINECOMMENT == type )
        {
            while ( NodeIterator_hasNext( self ) )
            {
                const Token* token = Node_getToken( NodeIterator_next( self ) );

                if ( Token_getTokenType( token ) == NEWLINE )
                {
                    break;
                }
            }
        }
        else
        if ( WHITESPACE != TokenGroup_getGroupType( Token_getTokenGroup( token ) ) )
        {
            has_next_nws = TRUE;
            break;
        }
        else
        {
            NodeIterator_next( self );
        }
    }

    return has_next_nws;
}
~

~c/ix/NodeIterator.c~
bool NodeIterator_hasNonWhitespaceOfType( NodeIterator* self, EnumTokenType type )
{
    bool has = FALSE;

    if ( NodeIterator_hasNonWhitespace( self ) )
    {
        const Node* peek = NodeIterator_peek( self );
        has = (type == Token_getTokenType( Node_getToken( peek ) ) );
    }
    return has;
}
~

~c/ix/NodeIterator.c~
const Node* NodeIterator_next( NodeIterator* self )
{
    return (const void*) Array_getObject( self->nodes, self->next++ );
}
~

~c/ix/NodeIterator.c~
const Node* NodeIterator_peek( NodeIterator* self )
{
    return (const void*) Array_getObject( self->nodes, self->next );
}
~

~c/ix/NodeIterator.c~
String* NodeIterator_nextTokenString( NodeIterator* self )
{
    return Node_tokenString( NodeIterator_next( self ) );
}
~
