.. StringBuffer

~!include/ixcompiler.StringBuffer.h~
#ifndef IXCOMPILER_STRINGBUFFER_H
#define IXCOMPILER_STRINGBUFFER_H

StringBuffer* StringBuffer_new              ();
StringBuffer* StringBuffer_free             ( StringBuffer** self                     );
StringBuffer* StringBuffer_append           ( StringBuffer*  self, const char* suffix );
StringBuffer* StringBuffer_append_char      ( StringBuffer*  self, char        ch     );
StringBuffer* StringBuffer_appendLine       ( StringBuffer*  self, char* prefix, DISPOSABLE String* string );


const char*   StringBuffer_content    ( const StringBuffer*  self );
bool          StringBuffer_isEmpty    ( const StringBuffer*  self );
String*       StringBuffer_toString   ( const StringBuffer*  self );

#endif
~

~!c/ixcompiler.StringBuffer.c~
#include "ixcompiler.h"
#include "ixcompiler.Platform.h"
#include "ixcompiler.String.h"
#include "ixcompiler.StringBuffer.h"

struct _StringBuffer
{
    char* content;
    int   length;

};

String* StringBuffer_nullString = null;
~

~c/ixcompiler.StringBuffer.c~
StringBuffer* StringBuffer_new()
{
    StringBuffer* self = Platform_Alloc( sizeof( StringBuffer ) );

    if ( self )
    {
        self->content = String_Copy( "" );
        self->length  = 0;
    }
    return self;
}
~

~c/ixcompiler.StringBuffer.c~
StringBuffer* StringBuffer_free( StringBuffer** self )
{
    if ( *self )
    {
        Platform_Free( &(*self)->content );
        Platform_Free(    self           );
    }

    return *self;
}
~

~c/ixcompiler.StringBuffer.c~
StringBuffer* StringBuffer_append( StringBuffer* self, const char* suffix )
{
    self->length += String_Length( suffix );
    char* tmp = self->content;
    self->content = String_Cat( tmp, suffix );

    Platform_Free( &tmp );

    return self;
}
~

~c/ixcompiler.StringBuffer.c~
StringBuffer* StringBuffer_append_char( StringBuffer* self, char ch )
{
    char suffix[2] = { ch , '\0' };

    return StringBuffer_append( self, suffix );
}
~

~c/ixcompiler.StringBuffer.c~
StringBuffer* StringBuffer_appendLine ( StringBuffer*  self, char* prefix, DISPOSABLE String* optional_string )
{
    if ( String_Length( prefix ) )
    {
        StringBuffer_append( self, prefix );
        StringBuffer_append( self, " "    );
    }

    if ( optional_string )
    {
        StringBuffer_append( self, String_content( optional_string ) );
        String_free( &optional_string );
    }
    StringBuffer_append( self, "\n" );
}
~

~c/ixcompiler.StringBuffer.c~
const char* StringBuffer_content( const StringBuffer* self )
{
    return self->content;
}
~

~c/ixcompiler.StringBuffer.c~
bool StringBuffer_isEmpty( const StringBuffer* self )
{
    return (0 == String_Length( self->content ));
}
~

~c/ixcompiler.StringBuffer.c~
String* StringBuffer_toString( const StringBuffer* self )
{
    return String_new( StringBuffer_content( self ) );
}
~
