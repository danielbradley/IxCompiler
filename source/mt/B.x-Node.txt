
.. Node

~!include/ix/Node.h~
#ifndef IX_NODE_H
#define IX_NODE_H

Node* Node_new ( Token** token );
Node* Node_free( Node**  self  );

void  Node_setParent   ( Node* self, const Node* parent );
void  Node_setTag      ( Node* self, const char* tag );
Node* Node_addChild    ( Node* self, Token** token );
Node* Node_getLastChild( Node* self );

const Token*  Node_getToken    ( const Node* self );
const String* Node_getTag      ( const Node* self );

bool          Node_hasChildren ( const Node* self );
NodeIterator* Node_iterator    ( const Node* self );
String*       Node_export      ( const Node* self );
String*       Node_tokenString ( const Node* self );

#endif
~

~!c/ix/Node.c~
#include "ix.h"
#include "ixcompiler.Token.h"

struct _Node
{
    Token*      token;
    const Node* parent;
    Array*      children;
    String*     tag;
};
~

~c/ix/Node.c~
Node* Node_new( Token** token )
{
    Node* self = Platform_Alloc( sizeof( Node ) );

    if ( self )
    {
        self->token    = *token; *token = null;
        self->children = Array_new( (Destructor) Node_free );
    }
    return self;
}
~

~c/ix/Node.c~
Node* Node_free( Node** self )
{
    if ( *self )
    {
        Token_free( &(*self)->token );

        Node* node = null;
        while ( (node = Array_shift( (*self)->children )) )
        {
            Node_free( &node );
        }
        Array_free ( &(*self)->children );
        String_free( &(*self)->tag      );

        (*self)->parent = null;

        Platform_Free( self );
    }
}
~

~c/ix/Node.c~
void Node_setParent( Node* self, const Node* parent )
{
    self->parent = parent;
}
~

~c/ix/Node.c~
void Node_setTag( Node* self, const char* tag )
{
    self->tag = String_new( tag );
}
~

~c/ix/Node.c~
Node* Node_addChild( Node* self, Token** token )
{
    Node* child = Node_new( token );
    Node* ref   = child;

    Array_push( self->children, (void**) &child );

    return ref;
}
~

~c/ix/Node.c~
Node* Node_getLastChild( Node* self )
{
    int last = Array_getLength( self->children ) - 1;

    return (Node*) Array_getObject( self->children, last );
}
~

~c/ix/Node.c~
const Token* Node_getToken( const Node* self )
{
    return self->token;
}
~

~c/ix/Node.c~
const String* Node_getTag( const Node* self )
{
    return self->tag;
}
~

~c/ix/Node.c~
bool Node_hasChildren( const Node* self )
{
    return (0 < Array_getLength( self->children ));
}
~

~c/ix/Node.c~
NodeIterator* Node_iterator( const Node* self )
{
    return NodeIterator_new( self->children );
}
~

~c/ix/Node.c~
String* Node_export( const Node* self )
{
    String* ret = null;
    {
        StringBuffer* sb = StringBuffer_new();
        NodeIterator* it = Node_iterator( self );
        while ( NodeIterator_hasNext( it ) )
        {
            const Node*   node  = NodeIterator_next( it );
            const Token*  token = Node_getToken( node );

            if ( NEWLINE == Token_getTokenType( token ) ) break;

            StringBuffer_append( sb, Token_getContent( token ) );
        }
        ret = String_new( StringBuffer_content( sb ) );
        StringBuffer_free( &sb );
    }
    return ret;
}
~

~c/ix/Node.c~
String* Node_tokenString ( const Node* self )
{
    return String_new( Token_getContent( Node_getToken( self ) ) );
}
~
