
. Implementation

~
ixc --output-dir _gen/c --target-language C [--dry-run]
~

~!c/main.c~
//
//  Copyright 2021 Daniel Robert Bradley
//

#include <stdlib.h>

#include "ixcompiler.h"
#include "ixcompiler.Arguments.h"
#include "ixcompiler.Console.h"
#include "ixcompiler.File.h"
#include "ixcompiler.FilesIterator.h"
#include "ixcompiler.Path.h"
#include "todo.h"

int main( int argc, char** argv )
{
    int            status      = 1;
    Arguments*     args        = Arguments_new( argc, argv );
    bool           dry_run     = Arguments_hasFlag      ( args, ARGUMENT_DRY_RUN );
    const char*    target_lang = Arguments_getOption    ( args, ARGUMENT_TARGET_LANGUAGE );
    const char*    output_dir  = Arguments_getOption    ( args, ARGUMENT_OUTPUT_DIR );
    FilesIterator* files       = Arguments_filesIterator( args );
    Path*          output_path = Path_new( output_dir );

    if ( !Path_exists( output_path ) )
    {
        Console_Write( ABORT_DIRECTORY_DOES_NOT_EXIST, output_dir );
        exit( -1 );
    }
    else
    if ( !Path_canWrite( output_path ) )
    {
        Console_Write( ABORT_DIRECTORY_IS_NOT_WRITABLE, output_dir );
        exit( -1 );
    }
    else
    {
        Generator* generator = Generator_new( target_lang );

        if ( !generator )
        {
            Console_Write( ABORT_TARGET_LANGUAGE_NOT_SUPPORTED, target_lang );
        }
        else
        {
            while ( FilesIterator_hasNext( files ) )
            {
                File* file = FilesIterator_next( files );

                if ( File_exists( file ) && File_canRead( file ) )
                {
                    Tokenizer* tokenizer = Tokenizer_new ( file );
                    IxParser*  parser    = IxParser_new  ( tokenizer );
                    AST*       ast       = IxParser_parse( parser );

                    if ( !dry_run )
                    {
                        status &= Generator_writeAST( generator, ast, output_path, file );
                    }

                    Tokenizer_free( &tokenizer );
                    IxParser_free( &parser );
                    AST_free( &ast );
                }

                File_free( &file );
            }
        }

        Generator_free( &generator );
    }

    Arguments_free    ( &args );
    FilesIterator_free( &files );
    Path_free         ( &output_path );

    return !status;
}
~

