
.. Ix Source Parameter

~!include/ixcompiler.IxSourceParameter.h~
#ifndef IXCOMPILER_IXSOURCEPARAMETER_H
#define IXCOMPILER_IXSOURCEPARAMETER_H

#include "ixcompiler.h"

IxSourceParameter* IxSourceParameter_new( const Node* wordNode );

IxSourceParameter*  IxSourceParameter_free           (       IxSourceParameter** self );
const String*       IxSourceParameter_getName        ( const IxSourceParameter*  self );
const IxSourceType* IxSourceParameter_getType        ( const IxSourceParameter*  self );
const String*       IxSourceParameter_getDefaultValue( const IxSourceParameter*  self );

#endif
~

~!c/ixcompiler.IxSourceParameter.c~
#include "ixcompiler.EnumTokenType.h"
#include "ixcompiler.IxSourceParameter.h"
#include "ixcompiler.IxSourceType.h"
#include "ixcompiler.Token.h"

struct _IxSourceParameter
{
    bool          invalid;
    String*       name;
    String*       oftype;
    IxSourceType* type;
    String*       defaultValue;
};

void parseWordNode( IxSourceParameter* self, const Node* wordNode );
~

~c/ixcompiler.IxSourceParameter.c~
IxSourceParameter* IxSourceParameter_new( const Node* wordNode )
{
    IxSourceParameter* self = Platform_Alloc( sizeof( IxSourceParameter ) );
    if ( self )
    {
        self->name         = String_new( "" );
        self->oftype       = String_new( "" );
        self->type         = IxSourceType_new( self->oftype );
        self->defaultValue = String_new( "" );

        parseWordNode( self, wordNode );
    }
    return self;
}
~

~c/ixcompiler.IxSourceParameter.c~
IxSourceParameter* IxSourceParameter_free( IxSourceParameter** self )
{
    if ( *self )
    {
        String_free      ( &(*self)->name         );
        String_free      ( &(*self)->oftype       );
        IxSourceType_free( &(*self)->type         );
        String_free      ( &(*self)->defaultValue );
        Platform_Free    (    self                );
    }
    return *self;
}
~

~c/ixcompiler.IxSourceParameter.c~
const String* IxSourceParameter_getName( const IxSourceParameter* self )
{
    return self->name;
}
~

~c/ixcompiler.IxSourceParameter.c~
const IxSourceType* IxSourceParameter_getType( const IxSourceParameter* self )
{
    return self->type;
}
~

~c/ixcompiler.IxSourceParameter.c~
const String* IxSourceParameter_getDefaultValue( const IxSourceParameter* self )
{
    return self->defaultValue;
}
~

~c/ixcompiler.IxSourceParameter.c~
void parseWordNode( IxSourceParameter* self, const Node* wordNode )
{
    const Token* token = Node_getToken( wordNode );

    if ( WORD == Token_getTokenType( token ) )
    {
        String_free( &self->name );
        self->name = String_new( Token_getContent( token ) );

        NodeIterator* it = Node_iterator( wordNode );
        if ( NodeIterator_hasNonWhitespaceOfType( it, OFTYPE ) )
        {
            self->oftype = String_new( Token_getContent( Node_getToken( NodeIterator_next( it ) ) ) );

            if
            (
                NodeIterator_hasNonWhitespaceOfType( it, PRIMITIVE )
            ||  NodeIterator_hasNonWhitespaceOfType( it, WORD      )
            )
            {
                self->type = IxSourceType_new( String_new( Token_getContent( Node_getToken( NodeIterator_next( it ) ) ) ) );
            }
            else
            {
                self->invalid = TRUE;
            }

            if ( NodeIterator_hasNonWhitespaceOfType( it, STARTSUBSCRIPT ) )
            {
                NodeIterator_next( it );
                IxSourceType_setAsArray( self->type, TRUE );

                if ( NodeIterator_hasNonWhitespaceOfType( it, ENDSUBSCRIPT ) )
                {
                    NodeIterator_next( it );
                }
                else
                {
                    self->invalid = TRUE;
                }
            }

            if ( NodeIterator_hasNonWhitespaceOfType( it, INFIXOP ) )
            {
                const Token* token   = Node_getToken( NodeIterator_next( it ) );
                const char*  content = Token_getContent( token );

                switch ( content[0] )
                {
                case '*':
                    IxSourceType_setAsPointer( self->type, TRUE );
                    break;
                
                case '&':
                    IxSourceType_setAsReference( self->type, TRUE );
                    break;
                }
            }
        }
        else
        {
            self->invalid = TRUE;
        }
    }
    else
    {
        self->invalid = TRUE;
    }
}
~
