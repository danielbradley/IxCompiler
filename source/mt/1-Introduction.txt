
. Introduction

Here is documented the implementation of the Ix Compiler,
which translates between the Ix programming language and target languages.
Initialy, the first language to be targeted will be C,
but later the intention is to target C++, C#, Java, and Swift.

Ix is an object oriented programming language meaning the language supports:

*   classes, which can be instantiated into objects
*   single inheritance of parent classes
*   multiple implementation of interfaces
*   dynamic dispatch similar to Java

Philosophically, Ix can be considered an evolution of Strustup's original C with Classes concept
as the language will not include any features that cannot be implemented in C.
However, the language itself is heavily influenced by C++ and Java.

Similar to Java, source files are located within a source directory,
however,
in contrast to Java,
a namespace/package of a source file is determined by the dotted notation name
of the folder it is contained within.
Also the name of a class is determined by the name of its source file -
not specified _within_ the source file like most (?all?) other language.
it .
For example, the following source file is contained within the 'com.ixlang.package' namespace,
and the class name will be 'SourceFile'.

See: [ixlang.org](https://ixlang.org) for more details.

~
Example file path: source/ix/ix.base/StringBuffer.ix
~

~
public class extends Object implements Interface
{
    @data: char[]

    %count: int
}

public new()
{
    @data[] = new char[]
    #count++
}

public append( aString: string& )
{
    foreach( character in aString )
    {
        @data[] = character;
    }
}

public append( aString: string* )
{
    foreach( character in aString )
    {
        @data[] = character;
    }
    // aString is implicitly destroyed at end of method.
}
~

The language has the following features:

*   Instance and class members are declared/defined within a class block.
*   Classes must indicate their visibility via public, private, etc.
*   Methods are defined with the same source file and below the class definition.
*   Methods must indicate their visibility via public, private, etc.
*   Similar to C++, an asterisk denotes a pointer and an ampersand denotes a reference.
*   When a pointer is passed, the caller losses access to that pointer (it is made null).
*   Memory is managed by deleting an non-null pointers.
